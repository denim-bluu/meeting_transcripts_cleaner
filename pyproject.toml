[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "meeting-transcript-cleaner"
version = "0.1.0"
description = "Dual-agent system for processing meeting transcripts with 97-98% accuracy"
readme = { file = "CLAUDE.md", content-type = "text/markdown" }
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Meeting Transcript Cleaner", email = "dev@example.com" }]
keywords = ["meeting", "transcript", "cleaning", "ai", "agents"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Text Processing",
  "Topic :: Office/Business",
]
dependencies = [
  "aiofiles>=24.1.0",
  "asyncio-throttle>=1.0.2",
  "cachetools>=5.5.0",
  "openai>=1.50.0",
  "pydantic>=2.9.0",
  "pydantic-ai>=0.0.13",
  "pydantic-settings>=2.0.0",
  "pyyaml>=6.0.0",
  "streamlit>=1.39.0",
  "tiktoken>=0.8.0",
  "chardet>=5.2.0",
  "watchdog>=6.0.0",
  "structlog>=25.4.0",
]

[project.optional-dependencies]
dev = [
  "black>=24.0.0",
  "isort>=5.13.0",
  "mypy>=1.11.0",
  "pre-commit>=3.8.0",
  "pytest>=8.0.0",
  "pytest-asyncio>=0.24.0",
  "pytest-cov>=5.0.0",
  "ruff>=0.6.0",
]
test = [
  "faker>=25.0.0",
  "httpx>=0.27.0",
  "hypothesis>=6.100.0",
  "nltk>=3.9.0",
  "numpy>=1.26.0",
  "pytest>=8.0.0",
  "pytest-asyncio>=0.24.0",
  "pytest-benchmark>=4.0.0",
  "pytest-cov>=5.0.0",
  "pytest-mock>=3.14.0",
  "pytest-timeout>=2.3.0",
  "pytest-xdist>=3.3.0",
  "responses>=0.25.0",
  "rouge-score>=0.1.2",
  "scikit-learn>=1.5.0",
  "psutil>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/username/meeting-transcript-cleaner"
Repository = "https://github.com/username/meeting-transcript-cleaner"
Issues = "https://github.com/username/meeting-transcript-cleaner/issues"

[project.scripts]
transcript-cleaner = "streamlit_app:main"

[tool.setuptools]
packages = ["models", "core", "prompts", "utils"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = [
  "state",
  "models",
  "core",
  "prompts",
  "components",
  "utils",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "reflex.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydantic_ai.*"
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort (import sorting)
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = ["E501", "B008", "C901"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-single-line = false
force-sort-within-sections = true
known-first-party = ["your_package_name"] # Replace with your package
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "S101"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "--strict-markers",
  "--strict-config",
  "--cov=.",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=html",
  "--cov-report=xml",
  "--cov-fail-under=90",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
omit = ["tests/*", "venv/*", ".venv/*", "*/__pycache__/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.uv]
dev-dependencies = ["ptpython>=3.0.30", "pytest>=8.4.1"]
