"""Upload and Process VTT Files - Refactored with clean architecture."""

from components.error_display import (
    display_error,
    display_validation_errors,
)
from components.health_check import require_healthy_backend
from components.progress_tracker import ProgressTracker
from services.backend_service import BackendService
from services.state_service import StateService
from services.task_service import TaskService
import streamlit as st
from utils.constants import STATE_KEYS
from utils.helpers import format_file_size, validate_file

# Page configuration
st.set_page_config(page_title="Upload & Process", page_icon="📤", layout="wide")


def initialize_services():
    """Initialize all required services."""
    backend = BackendService()
    task_service = TaskService(backend)
    progress_tracker = ProgressTracker(task_service)
    return backend, task_service, progress_tracker


def initialize_page_state():
    """Initialize page-specific session state."""
    required_state = {
        STATE_KEYS.CURRENT_TASK_ID: None,
        STATE_KEYS.PROCESSING_STATUS: "idle",
        STATE_KEYS.TRANSCRIPT_DATA: None,
        "upload_file": None,
        "processing_complete": False,
    }
    StateService.initialize_page_state(required_state)


def render_file_upload_section():
    """Render file upload interface."""
    st.subheader("📎 Select VTT File")

    uploaded_file = st.file_uploader(
        "Choose a VTT transcript file",
        type=["vtt"],
        help="Upload your meeting transcript file (.vtt format)",
        key="file_uploader",
    )

    if uploaded_file:
        # Validate file
        is_valid, error_message = validate_file(uploaded_file)

        if not is_valid:
            display_validation_errors([error_message])
            return None

        # Show file info
        st.markdown("### 📄 File Information")
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Filename", uploaded_file.name)
        with col2:
            file_size = len(uploaded_file.getvalue())
            st.metric("Size", format_file_size(file_size))
        with col3:
            st.metric("Type", uploaded_file.type or "text/vtt")

        # Preview content
        with st.expander("🔍 Preview File Content"):
            try:
                content = uploaded_file.getvalue().decode("utf-8")
                preview = content[:1000]
                if len(content) > 1000:
                    preview += "\n\n... (truncated)"
                st.code(preview, language="text")
            except Exception as e:
                st.error(f"Could not preview file: {e}")

        return uploaded_file
    else:
        # Show what happens during processing
        st.markdown("### 🔄 Processing Steps")
        st.markdown("1. **📤 Upload**: File securely sent to processing backend")
        st.markdown("2. **🔧 Parse**: VTT content parsed and chunked for AI processing")
        st.markdown("3. **🤖 Clean**: AI agents clean speech-to-text errors")
        st.markdown("4. **📊 Review**: Quality review ensures high accuracy")
        st.markdown("5. **✅ Complete**: Cleaned transcript ready for review")

        st.info(
            "💡 **Tip**: VTT files are generated by most meeting platforms (Zoom, Teams, Google Meet)"
        )

    return None


def process_file(
    backend: BackendService, progress_tracker: ProgressTracker, uploaded_file
) -> bool:
    """Process uploaded file with progress tracking."""

    def on_success(task_data):
        """Handle successful processing."""
        result = task_data.get("result", {})
        st.session_state[STATE_KEYS.TRANSCRIPT_DATA] = result
        st.session_state["transcript"] = result  # For backward compatibility
        st.session_state["transcript_task_id"] = st.session_state[
            STATE_KEYS.CURRENT_TASK_ID
        ]
        st.session_state["processing_complete"] = True
        st.session_state[STATE_KEYS.PROCESSING_STATUS] = "completed"

        # Show success message and metrics
        st.success("🎉 VTT processing completed successfully!")

        # Show basic processing metrics
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("VTT Entries", len(result.get("entries", [])))
        with col2:
            st.metric("Chunks", len(result.get("chunks", [])))
        with col3:
            st.metric("Speakers", len(result.get("speakers", [])))
        with col4:
            st.metric("Duration", f"{result.get('duration', 0):.1f}s")

        # Show speakers
        speakers = result.get("speakers", [])
        if speakers:
            st.markdown(f"**Speakers:** {', '.join(speakers)}")

    def on_error(error_message):
        """Handle processing error."""
        st.session_state[STATE_KEYS.PROCESSING_STATUS] = "failed"
        display_error("processing_failed", error_message)

    # Start upload
    st.session_state[STATE_KEYS.PROCESSING_STATUS] = "uploading"

    file_content = uploaded_file.getvalue()
    success, response = backend.upload_file(file_content, uploaded_file.name)

    if not success:
        error_msg = response.get("error", "Upload failed")
        display_error("upload_failed", error_msg)
        return False

    # Get task ID and start tracking
    task_id = response.get("task_id")
    if not task_id:
        display_error("upload_failed", "No task ID received")
        return False

    st.session_state[STATE_KEYS.CURRENT_TASK_ID] = task_id
    StateService.set_url_param("task_id", task_id)

    # Track processing
    st.session_state[STATE_KEYS.PROCESSING_STATUS] = "processing"

    return progress_tracker.track_task(
        task_id=task_id,
        title="🔄 Processing VTT File",
        success_callback=on_success,
        error_callback=on_error,
    )


def render_results_section():
    """Render processing results and next steps."""
    transcript_data = st.session_state.get(STATE_KEYS.TRANSCRIPT_DATA)

    if not transcript_data:
        return

    st.success("✅ File processed successfully!")

    # Show basic metrics
    col1, col2 = st.columns([2, 1])

    with col1:
        st.markdown("### 📊 Processing Results")
        # Show basic processing metrics
        col_a, col_b, col_c, col_d = st.columns(4)
        with col_a:
            st.metric("VTT Entries", len(transcript_data.get("entries", [])))
        with col_b:
            st.metric("Chunks", len(transcript_data.get("chunks", [])))
        with col_c:
            st.metric("Speakers", len(transcript_data.get("speakers", [])))
        with col_d:
            st.metric("Duration", f"{transcript_data.get('duration', 0):.1f}s")

    with col2:
        st.markdown("### 🎯 Next Steps")
        if st.button("👀 Review Results", use_container_width=True, type="primary"):
            st.switch_page("pages/2_👀_Review.py")

        if st.button("🧠 Extract Intelligence", use_container_width=True):
            st.switch_page("pages/3_🧠_Intelligence.py")


def handle_task_resumption(backend: BackendService, task_service: TaskService):
    """Handle resumption of existing task from URL."""
    task_id = StateService.handle_task_resumption()

    if not task_id:
        return

    st.info(f"🔄 Resuming task: {task_id[:8]}...")

    # Get task result
    result = task_service.get_task_result(task_id)

    if result:
        st.session_state[STATE_KEYS.TRANSCRIPT_DATA] = result
        st.session_state["transcript"] = result  # For backward compatibility
        st.session_state[STATE_KEYS.CURRENT_TASK_ID] = task_id
        st.session_state["processing_complete"] = True
        st.success("✅ Task resumed successfully!")
        StateService.clear_url_params(["task_id"])
    else:
        display_error("task_not_found")
        StateService.clear_url_params(["task_id"])


def main():
    """Main page logic."""
    # Initialize
    backend, task_service, progress_tracker = initialize_services()
    initialize_page_state()

    st.title("📤 Upload & Process VTT Files")
    st.markdown(
        "Upload your VTT meeting transcript for AI-powered cleaning and processing."
    )

    # Require healthy backend
    require_healthy_backend(backend)

    # Handle task resumption
    handle_task_resumption(backend, task_service)

    # Check if already completed
    if st.session_state.get("processing_complete"):
        render_results_section()
        st.markdown("---")
        st.markdown("**Or upload a new file below:**")

    # Check if currently processing
    status = st.session_state[STATE_KEYS.PROCESSING_STATUS]

    if status == "processing":
        task_id = st.session_state[STATE_KEYS.CURRENT_TASK_ID]
        if task_id:
            st.info("🔄 Processing in progress...")
            success = progress_tracker.track_task(
                task_id=task_id,
                title="🔄 Resuming Processing...",
                success_callback=lambda data: setattr(
                    st.session_state, "processing_complete", True
                ),
                error_callback=lambda error: setattr(
                    st.session_state, STATE_KEYS.PROCESSING_STATUS, "failed"
                ),
            )
            if success:
                st.rerun()
        return

    # File upload section
    uploaded_file = render_file_upload_section()

    if uploaded_file:
        st.markdown("### 🚀 Start Processing")
        if st.button("🔄 Process VTT File", type="primary", use_container_width=True):
            st.session_state["upload_file"] = {"name": uploaded_file.name}
            success = process_file(backend, progress_tracker, uploaded_file)
            if success:
                st.rerun()


if __name__ == "__main__":
    main()
